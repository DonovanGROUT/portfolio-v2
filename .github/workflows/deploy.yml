# 🚀 Pipeline de Déploiement - Portfolio PlanetHoster
# Ce workflow gère le déploiement du portfolio vers PlanetHoster
# via SSH sécurisé avec transfert SFTP après validation complète de la qualité
name: 🚀 Deploy to PlanetHoster

# Déclencheurs
on:
  push:
    branches: [main] # Déploiement automatique sur main
  workflow_dispatch: # Déploiement manuel possible

# Variables d'environnement
env:
  NODE_VERSION: "18.x"

jobs:
  # ===================================================================
  # PRÉ-REQUIS: Vérification de la qualité avant déploiement
  # ===================================================================
  quality-gate:
    name: 🚨 Quality Gate
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      # Tests rapides pour vérifier que tout fonctionne
      - name: ✅ Quick quality check
        run: |
          npm run format:check
          npm run lint:strict
          npm run test:run

      - name: 🏗️ Build for production
        run: npm run build

      # Archivage du build optimisé pour déploiement
      - name: 📦 Archive production build
        uses: actions/upload-artifact@v3
        with:
          name: production-build
          path: |
            .next/
            public/
            package.json
            next.config.ts
          retention-days: 7

  # ===================================================================
  # DÉPLOIEMENT: Upload vers PlanetHoster
  # ===================================================================
  deploy-production:
    name: 🌐 Deploy to PlanetHoster
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: production-build
          path: ./build

      # Configuration pour PlanetHoster
      - name: 🔧 Setup deployment
        run: |
          echo "🚀 Preparing deployment to PlanetHoster..."
          echo "📁 Build artifacts ready"
          ls -la ./build

      # Déploiement via SFTP vers PlanetHoster N0c (clé SSH sécurisée)
      - name: 🌐 Deploy via SFTP
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.PLANETHOSTER_SSH_PRIVATE_KEY }}
          ARGS: "-rlgoDzvc -i --delete"
          SOURCE: "./build/"
          REMOTE_HOST: ${{ secrets.PLANETHOSTER_HOST }}
          REMOTE_USER: ${{ secrets.PLANETHOSTER_USERNAME }}
          REMOTE_PORT: ${{ secrets.PLANETHOSTER_PORT }}
          TARGET: ${{ secrets.PLANETHOSTER_PATH }}

      # Tests post-déploiement
      - name: 🔍 Verify deployment
        run: |
          echo "🔍 Verifying deployment..."
          echo "⚠️ Manual verification recommended for first deploy"

      # Notification de succès
      - name: 🎉 Deployment successful
        run: |
          echo "✅ DEPLOYMENT SUCCESSFUL!"
          echo "🌐 Site: https://donovan-grout.com"
          echo "📅 Deployed: $(date)"
          echo "🔗 Commit: ${{ github.sha }}"

  # ===================================================================
  # NETTOYAGE: Suppression des artéfacts temporaires
  # ===================================================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: 🗑️ Clean up artifacts
        run: |
          echo "🧹 Cleaning up deployment artifacts..."
          echo "✅ Cleanup complete"
